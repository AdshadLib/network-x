@Neo4j = new Neo4jDB()
stringify = Neo4j.stringify.bind(Neo4j)

# # debug = console.log.bind(console)
# debug = lodash.noop


## Dinerolatino corp is whwere I ended ##i



seed = ->
  # Creating 26 people
  Neo4j.query "MERGE (a:Person {name:'Wilmer Ruperti', tags:['energy'], description:'Businessman involved in oil, shipping, and import/export. He is Glencore's man in Venezuela.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Gustavo Pordomo', description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Jesús Pérez', description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Roger Torres', description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Donald Ramirez', description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Ángel Meza', tags:['finance'], description:'Banker', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Juan Domingo Cordero', description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Maria A. de Perdomo', description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Victor Gill', tags:['finance'], description:'Banker in Venezuela. One of the biggest names in Venezuelan corruption.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Ingrid Anselmi de Frontado', description:'Aunt of Luis Oberto. She is the person who got him the position at the stock exchange.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Orlando Castro Llanes', tags:['finance'], description:'Banker and owner of Grupo Progreso. Busted for money laundering for Pablo Escobar. He is a Venezuelan. Arrested by Morganthau in New York.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Juan Carlos Escotet', tags:['finance'], description:'Banker in Venezuela. Well known among money laundering circles.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Miguel Angel Capriles Cannizaro', tags:['finance'], description:'Businessman involved in media and banking.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Carlo Acosto Lopez', description:'Michu\'s right hand man in Venezuela.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Nicolas Maduro', tags:['politics'], description:'President of Venezuela.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Delcy Rodriguez', tags:['politics'], description:'Minister of Information and Communication. Sister of Jorge Rodriguez, the mayor of Caracas and one of the top Chavistas.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Jorge Rodriguez', tags:['politics'], description:'Mayor of Caracas, former Vice President of Venezuela, and one of the top Chavistas.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Jose Antonio Oliveros Febres Cordero', tags:['finance'], description:'Banker and owner of Banco Activo.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Luis Velasquez Alvaray', tags:['politics'], description:'Former supreme court judge. On record saying he got a phone call from Chavez telling him to rule in favor of Michu.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Jose Vicente Rengel', tags:['politics'], description:'Former Vice President of Venezuela. Possibly the most powerful man in the country.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Emilio Botin', tags:['finance'], description:'Spanish banker who used to run Grupo Santander.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Joseph de Maria', tags:['law'], description:'Legal counsel for a number of Venezuelan criminals.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Eloy Montenegro', description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Alejandro Andrade', tags:['politics'], description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Rafael Sarria', description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Hugo Carvajal', tags:['politics'], description:'Politician involved with drug trafficking.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Alejandro Betancourt', tags:['energy', 'finance'], description:'Finance person turned money lanuderer through fake electricity companies.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Francisco Convit', tags:['energy'], description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Pedro Trebbau Lopez', tags:['energy'], description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Victor Vargs', tags:['finance'], description:'The Al Capone of Venezuelan money laundering. He is the go-to guy for criminals in Venezuela who want to cut a deal. One of the most powerful men in the country.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Diego Enrique Lepage', tags:['finance'], description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Francisco D\'Agostino', tags:['finance', 'energy'], description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Luis Oberto', tags:['finance'], description:'Banker in New York.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Charles Beaumont', tags:['finance'], description:'Swiss banker who works with a number of criminals in Venezuela to launder their money.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'D.D. Granados', tags:['finance'], description:'Finance person in Venezuela who is immensely wealthy. He is not flashy like most of the other criminals in Venezuela and generally flies under the radar.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Andres Coles', tags:['finance'], description:'New York representative of Davos Bank.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Pedro Rendon Mendoza', tags:['finance'], description:'Director of Quorum management and on the board of Cadena Capriles.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Miguel Angel Capriles Lopez', tags:['media', 'finance', 'politics'], description:'Owner of a media and banking empire in Venezuela. One of the most powerful people in the country and likely the most politically connected.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Enrique Capriles Radonski', tags:['politics'], description:'Leader of the opposition in Venezuela.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Ramon Guuillermo Aveledo', tags:['politics'], description:'Spokesperson for Movement Union Democratica (MUD), the opposition party.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Ramon Jose Medina', tags:['politics'], description:'Person in charge of international relations and strategy for the government. Also in charge of outreach. An employee of Vargas.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Teodoro Petkoff', tags:['media', 'politics'], description:'Editor of Talcual and an intellectual leader of Venezuela, especially among the opposition.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Juan Carlos Zapata', tags:['media'], description:'Created Descifrado as a website to expose corruption, then started accepting money to remove stories. It has since become something of a blackmailing operation.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Morris Beracha', tags:['finance'], description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Francisco Illarramendi', tags:['finance'], description:'Convicted criminal associated with a huge scandal in 2011. He lost David Osio his license in the United States.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'David Osio', tags:['finance'], description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Fernando Lauria', tags:['finance'], description:'Fugitive banker from Venezuela who stole approximately $500 million (USD). Lives in Miami. David Osio's brother-in-law.', author:'Simon'})"
  Neo4j.query "MERGE (a:Person {name:'Ricardo Fernandez Barrueco', tags:['foodstuffs'], description:'Owned a food conglomerate given to him by Chavez. Once Chavez nationalized food production, he put Barrueco in charge of the company, making him one of Venezuela's richest men, overnight. He has since been disgraced due to scandal.', author:'Simon'})"

  # Creating 5 companies: 2 industries
  Neo4j.query "MERGE (a:Company {name:'Madison Capital Fund LLC', tags:['finance'], description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Seguros', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Global Shipmanagement', tags:['logistics'] description:'Shipping company owned by Wilmer Ruperti. Ruperti uses this company to manage his ships—-separate from the company that owns the ships.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Suramericana de Transportes de Petroleo', description:'Ship-owning company, owned by Ruperti. Owns millions of dollars worth of cargo ships.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Transfigura', tags:['energy'], description:'Ruperti's commodities trading company. It is a major company and Ruperti is the Latin American representitive.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Glencore', tags:['energy', 'finance'], description:'12th largest company in the Fortune 500. Based in Switzerland, and one of the world's leading commodities companies.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Globovision', tags:['media'], description:'Venezuelan media company', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Almalatina', description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Dinerolatino Securities', tags:['finance'], description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'DI Capital Group', tags:['finance'], description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'One Allied Fund LLC', tags:['finance'], description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'One Allied College Park', description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Inversora Conivenca', description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Seguros La Vitalicia', tags:['finance'], description:'One of the biggest life insurance companies in Venezuela.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Administradora Perad', tags:['xxxxxx'], description:'Administrative services company.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Banco Canarias', tags:['finance'], description:'Bank in Venezuela.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Rowntree Properties', description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Dinerolatino Corp.', description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'College Inc.', description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Rim Group Investments Corp.', description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Banco Fondo Común', tags:['finance'], description:'Bank in Venezuela.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Seguros Venezuela', tags:['finance'], description:'Venezuelan insurance company.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Violet Consultants Group', tags:['finance'], description:'Company used for money laundering in the British Virgin Islands/Cayman Islands.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Pague Aqui', tags:['finance'], description:'Payment processing company, owned by Luis Oberto.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Lomas Investments', tags:['finance'], description:'Investment fund in Florida.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Banco Union', tags:['finance'], description:'One of the largest banks in Venezuela. Bought for $400 million (UDS) by Banesco.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Novagalicia Banco', tags:['finance'], description:'Spanish bank, bought by Escotet for $1 billion Euros.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Grupo Progreso', tags:['finance'], description:'Bank, insurance company, and provider of other financial services.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Banesco', tags:['finance'], description:'One of the largest banks in Venezuela. Formerly known as Bancentro.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Bancentro', tags:['finance'], description:'Bank in Venezuela. Purchased by Escotet with the help of Michu. This bank was purchased from the Gill Brothers, then changed its name to Banesco.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Banco Activo', tags:['finance'], description:'Venezuelan bank, run by former partner of Luis Oberto who still owns a significant stake.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Corp Banca', tags:['finance'], description:'Bank in Venezuela.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'La Lechuza Caracas, Inc.', tags:['sports'], description:'The company Victor Vargas created to move around his polo team.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Ultimas Noticias', tags:['media'], description:'Media company with the target audience of the poor. It is the largest newspaper by circulation, probably 10 times bigger than the second largest newspaper. It is a free paper and it is owned by the company Cadena Capriles.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'BC Securities Inc.', tags:['finance'], description:'Panamanian investment fund.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Element Capital', tags:['finance'], description:'Francisco D\'Agostino's capital management company.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Quorum Management Company', tags:['finance'], description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Banco Occidental de descuento', tags:['finance'], description:'Bank owned by Victor Vargas.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Derwick Associates', tags:['energy'], description:'Venezuelan energy company involved in money laundering on the order of billions of dollars.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Mirmidones', tags:['finance'], description:'Investment fund in the United States.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Celistic', tags:['logistics'], description:'Logistics firm in Florida.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Movilway', tags:['telecom'], description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'VADESA', tags:['media'], description:'Parent company that used to own Cadena Capriles.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Cadena Capriles', tags:['media'], description:'Holding company for a newspaper empire.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'El Mundo', tags:['media'], description:'Newspaper similar to Ultimas Noticias that has a target audience of the poor.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Talcual', tags:['media'], description:'Newspaper run by Teodoro Petkoff.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Descifrado', tags:['media'], description:'Website that blackmails criminals and accepts payments to remove stories exposing corruption.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Companie Bancaire Helvetique (CBH)', tags:['finance'], description:'Swiss bank that launders a significant percent of the corrupt money coming out of Venezuela.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'FTI Consulting', tags:['consulting'], description:'Multinational consulting company that works to protect the reputations of a number of criminals in Venezuela.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Cardenas LLP', tags:['law'], description:'Law firm owned by Al Cardenas. Josep de Maria was the legal counsel for nearly every Venezuelan criminal to be tried in the United States.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Grupo Santander', tags:['finance'], description:'Large Spanish bank.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Banco de Venezuela', tags:['finance'], description:'Was Venezuela\'s largest bank', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Davos Bank', tags:['finance'], description:'David Osio\'s bank. Headquartered in Antigua with offices in the United States.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'KPMG', tags:['finance'], description:'Financial services company based in the United States.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Deloitte', tags:['finance'], description:'Financial services company based in the United States.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Argentus Partners', description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'LMN Consulting', description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'PERTRAC Financial Solutions', tags:['finance'], description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Morgan & Morgan', tags:['law'], description:'Panamanian law firm that works for a number of criminals in Venezuela.', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'STvB Lawyers', tags:['law'], description:'N/A', author:'Simon'})"
  Neo4j.query "MERGE (a:Company {name:'Delta Equity', description:'N/A', author:'Simon'})"

  # Creating 6 jurisdictions: 4 countries, 3 states, 2 cities
  Neo4j.query "MERGE (a:Jurisdiction {name:'United States'})"
  Neo4j.query "MERGE (a:Jurisdiction {name:'Venezuela'})"
  Neo4j.query "MERGE (a:Jurisdiction {name:'Russia'})"
  Neo4j.query "MERGE (a:Jurisdiction {name:'Ukraine'})"
  Neo4j.query "MERGE (a:Jurisdiction {name:'British Virgin Islands'})"
  Neo4j.query "MERGE (a:Jurisdiction {name:'Cayman Islands'})"
  Neo4j.query "MERGE (a:Jurisdiction {name:'Spain'})"
  Neo4j.query "MERGE (a:Jurisdiction {name:'Panama'})"
  Neo4j.query "MERGE (a:Jurisdiction {name:'Switzerland'})"
  Neo4j.query "MERGE (a:Jurisdiction {name:'Antigua'})"

  # Creating 2 organizations: 2 industries
  Neo4j.query "MERGE (a:Organization {name:'Movement Union Democratica (MUD)', tags:['politics'], description:'Opposition party of Venezuela.', author:'Simon'})"

  # Creating edges between all people and their jurisdictions
  Neo4j.query "MATCH (a:Person {name:'Person A'}) MATCH (b:Jurisdiction {name:'United States'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person B'}) MATCH (b:Jurisdiction {name:'United States'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person C'}) MATCH (b:Jurisdiction {name:'United States'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person D'}) MATCH (b:Jurisdiction {name:'United States'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person E'}) MATCH (b:Jurisdiction {name:'United States'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person F'}) MATCH (b:Jurisdiction {name:'United States'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person G'}) MATCH (b:Jurisdiction {name:'United States'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person H'}) MATCH (b:Jurisdiction {name:'United States'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person I'}) MATCH (b:Jurisdiction {name:'United States'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person J'}) MATCH (b:Jurisdiction {name:'United States'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person K'}) MATCH (b:Jurisdiction {name:'United States'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person L'}) MATCH (b:Jurisdiction {name:'Venezuela'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person M'}) MATCH (b:Jurisdiction {name:'Venezuela'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person N'}) MATCH (b:Jurisdiction {name:'Venezuela'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person O'}) MATCH (b:Jurisdiction {name:'Venezuela'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person P'}) MATCH (b:Jurisdiction {name:'Venezuela'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person Q'}) MATCH (b:Jurisdiction {name:'Venezuela'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person R'}) MATCH (b:Jurisdiction {name:'Venezuela'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person S'}) MATCH (b:Jurisdiction {name:'Venezuela'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person T'}) MATCH (b:Jurisdiction {name:'Russia'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person U'}) MATCH (b:Jurisdiction {name:'Russia'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person V'}) MATCH (b:Jurisdiction {name:'Russia'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person W'}) MATCH (b:Jurisdiction {name:'Russia'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person X'}) MATCH (b:Jurisdiction {name:'Ukraine'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person Y'}) MATCH (b:Jurisdiction {name:'Ukraine'}) MERGE (a)-[r:CITIZEN]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person Z'}) MATCH (b:Jurisdiction {name:'Ukraine'}) MERGE (a)-[r:CITIZEN]->(b)"

  # Creating edges between companies and their jurisdictions
  Neo4j.query "MATCH (a:Company {name:'Company A'}) MATCH (b:Jurisdiction {name:'Venezuela'}) MERGE (a)-[r:LOCATION]->(b)"
  Neo4j.query "MATCH (a:Company {name:'Company A'}) MATCH (b:Jurisdiction {name:'United States'}) MERGE (a)-[r:LOCATION]->(b)"
  Neo4j.query "MATCH (a:Company {name:'Company A'}) MATCH (b:Jurisdiction {name:'Russia'}) MERGE (a)-[r:LOCATION]->(b)"
  Neo4j.query "MATCH (a:Company {name:'Company B'}) MATCH (b:Jurisdiction {name:'United States'}) MERGE (a)-[r:LOCATION]->(b)"
  Neo4j.query "MATCH (a:Company {name:'Company C'}) MATCH (b:Jurisdiction {name:'United States'}) MERGE (a)-[r:LOCATION]->(b)"
  Neo4j.query "MATCH (a:Company {name:'Company D'}) MATCH (b:Jurisdiction {name:'Ukraine'}) MERGE (a)-[r:LOCATION]->(b)"
  Neo4j.query "MATCH (a:Company {name:'Company D'}) MATCH (b:Jurisdiction {name:'Russia'}) MERGE (a)-[r:LOCATION]->(b)"
  Neo4j.query "MATCH (a:Company {name:'Company E'}) MATCH (b:Jurisdiction {name:'United States'})  MERGE (a)-[r:LOCATION]->(b)"

  # Creating organizations and their jurisdictions
  Neo4j.query "MATCH (a:Organization {name:'Organization A'}) MATCH (b:Jurisdiction {name:'Ukraine'}) MERGE (a)-[r:LOCATION]->(b)"
  Neo4j.query "MATCH (a:Organization {name:'Organization A'}) MATCH (b:Jurisdiction {name:'Russia'}) MERGE (a)-[r:LOCATION]->(b)"
  Neo4j.query "MATCH (a:Organization {name:'Organization A'}) MATCH (b:Jurisdiction {name:'Venezuela'}) MERGE (a)-[r:LOCATION]->(b)"
  Neo4j.query "MATCH (a:Organization {name:'Organization B'}) MATCH (b:Jurisdiction {name:'United States'}) MERGE (a)-[r:LOCATION]->(b)"
  Neo4j.query "MATCH (a:Organization {name:'Organization B'}) MATCH (b:Jurisdiction {name:'Venezuela'}) MERGE (a)-[r:LOCATION]->(b)"
  Neo4j.query "MATCH (a:Organization {name:'Organization B'}) MATCH (b:Jurisdiction {name:'United States'}) MERGE (a)-[r:LOCATION]->(b)"

  # Creating "who works for who" edges with regards to people and companies
  Neo4j.query "MATCH (a:Person {name:'Person A'}) MATCH (b:Company {name:'Company A'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person A'}) MATCH (b:Company {name:'Company B'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person A'}) MATCH (b:Company {name:'Company C'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person B'}) MATCH (b:Company {name:'Company A'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person C'}) MATCH (b:Company {name:'Company A'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person D'}) MATCH (b:Company {name:'Company A'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person E'}) MATCH (b:Company {name:'Company A'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person F'}) MATCH (b:Company {name:'Company B'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person G'}) MATCH (b:Company {name:'Company B'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person H'}) MATCH (b:Company {name:'Company B'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person I'}) MATCH (b:Company {name:'Company B'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person J'}) MATCH (b:Company {name:'Company B'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person K'}) MATCH (b:Company {name:'Company B'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person L'}) MATCH (b:Company {name:'Company C'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person M'}) MATCH (b:Company {name:'Company C'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person N'}) MATCH (b:Company {name:'Company C'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person O'}) MATCH (b:Company {name:'Company C'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person P'}) MATCH (b:Company {name:'Company C'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person Q'}) MATCH (b:Company {name:'Company C'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person R'}) MATCH (b:Company {name:'Company D'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person S'}) MATCH (b:Company {name:'Company D'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person T'}) MATCH (b:Company {name:'Company D'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person U'}) MATCH (b:Company {name:'Company D'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person V'}) MATCH (b:Company {name:'Company D'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person W'}) MATCH (b:Company {name:'Company E'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person X'}) MATCH (b:Company {name:'Company E'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person Y'}) MATCH (b:Company {name:'Company E'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person Z'}) MATCH (b:Company {name:'Company E'}) MERGE (a)-[r:WORKS_FOR]->(b)"

  # Creating "who works for who" edges with regards to people and organizations
  Neo4j.query "MATCH (a:Person {name:'Person A'}) MATCH (b:Organization {name:'Organization A'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person C'}) MATCH (b:Organization {name:'Organization A'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person Z'}) MATCH (b:Organization {name:'Organization A'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person R'}) MATCH (b:Organization {name:'Organization A'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person U'}) MATCH (b:Organization {name:'Organization A'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person S'}) MATCH (b:Organization {name:'Organization B'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person T'}) MATCH (b:Organization {name:'Organization B'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person U'}) MATCH (b:Organization {name:'Organization B'}) MERGE (a)-[r:WORKS_FOR]->(b)"
  Neo4j.query "MATCH (a:Person {name:'Person V'}) MATCH (b:Organization {name:'Organization B'}) MERGE (a)-[r:WORKS_FOR]->(b)"


# Find all the nodes in the database
x = Neo4j.query "MATCH (a) RETURN (a)"

# Determine if there are 0; if so, seed the database
if x.length is 0
  seed()
